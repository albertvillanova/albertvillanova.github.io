{
  
    
        "post0": {
            "title": "Transfer Learning from Supervised and Self-Supervised Pretraining using PyTorch Lightning",
            "content": "Credit to original author William Falcon, and also to Alfredo Canziani for posting the video presentation: Supervised and self-supervised transfer learning (with PyTorch Lightning) . In the video presentation, they compare transfer learning from pretrained: . supervised | self-supervised | . However, I would like to point out that the comparison is not entirely fair for the case of supervised pretraining. The reason is that they do not replace the last fully-connected layer of the supervised pretrained backbone model with the new finetuning layer. Instead, they stack the new finetuning layer on top of the pretrained model (including its last fully connected layer). . This is a clear disadvantage for the supervised pretrained model because: . all its expressive power is contained in the output of the penultimate layer | and it was already used by the last fully-connected layer to predict 1,000 classes | . When stacking the finetuning layer on top of it, this has to perform the 10-class classification using the output of the 1,000-class classfication layer. . On the contrary, if we replace the backbone last fully connected layer with the new finetuning layer, it will be able to perform the 10-class classification using all the expressive power of the features coming from the output of the penultimate layer. . In this notebook I show that if we replace the last fully connected layer with the new finetuning layer, both supervised and self-supervised approaches give comparable results. . %%capture !pip install pytorch-lightning !pip install pytorch-lightning-bolts==0.2.5rc1 . import pytorch_lightning as pl import pl_bolts print(f&quot;pl version: {pl.__version__}&quot;) print(f&quot;pl_bolts version: {pl_bolts.__version__}&quot;) . pl version: 1.0.6 pl_bolts version: 0.2.5rc1 . import torch from torchvision import models resnet50 = models.resnet50(pretrained=True) . Downloading: &#34;https://download.pytorch.org/models/resnet50-19c8e357.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth . . from torchvision.datasets import CIFAR10 from torchvision import transforms normalize = transforms.Normalize(mean=[x / 255.0 for x in [125.3, 123.0, 113.9]], std=[x / 255.0 for x in [63.0, 62.1, 66.7]]) cf10_transforms = transforms.Compose([ transforms.ToTensor(), normalize ]) cifar_10 = CIFAR10(&#39;.&#39;, train=True, download=True, transform=cf10_transforms) . Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./cifar-10-python.tar.gz Extracting ./cifar-10-python.tar.gz to . . from matplotlib import pyplot as plt image, label = next(iter(cifar_10)) print(f&quot;LABEL: {label}&quot;) plt_img = image.numpy().transpose(1, 2, 0) plt.imshow(plt_img); . Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). . LABEL: 6 . from torch.utils.data import DataLoader train_loader = DataLoader(cifar_10, batch_size=32, shuffle=True) . for batch in train_loader: x, y = batch print(x.shape, y.shape) break . torch.Size([32, 3, 32, 32]) torch.Size([32]) . import torch from torchvision import models resnet50 = models.resnet50(pretrained=True) for param in resnet50.parameters(): param.requires_grad = False num_classes = 10 resnet50.fc = torch.nn.Linear(resnet50.fc.in_features, num_classes) # Use afterwards in optimizer: resnet50.fc.parameters() . x, y = next(iter(train_loader)) preds = resnet50(x) preds[:5] . tensor([[-0.3801, -0.5696, 0.6141, -0.0555, -0.0337, -0.0064, 0.6410, 0.5071, 0.5621, -0.3443], [ 0.8296, -0.8653, 0.4210, -0.1691, 0.4789, -0.6263, 1.6198, 0.1962, 1.6246, -0.7211], [-0.2604, 0.1539, 0.4095, -0.1340, -0.0187, -0.2622, 0.5658, 0.2214, 0.6504, -0.0676], [ 0.2170, 0.0293, 0.1628, 0.3194, -0.0261, -0.3643, 0.0667, 0.0840, 0.2994, -0.4926], [ 0.5270, -0.7288, -0.4667, 0.3634, 0.4815, 0.3479, 1.4035, 0.4295, 0.3564, -0.1770]], grad_fn=&lt;SliceBackward&gt;) . from torch.nn.functional import softmax preds = softmax(preds, dim=-1) preds[:5] . tensor([[0.0569, 0.0470, 0.1537, 0.0787, 0.0804, 0.0826, 0.1579, 0.1381, 0.1459, 0.0589], [0.1203, 0.0221, 0.0799, 0.0443, 0.0847, 0.0280, 0.2650, 0.0638, 0.2663, 0.0255], [0.0646, 0.0978, 0.1263, 0.0733, 0.0823, 0.0645, 0.1476, 0.1046, 0.1606, 0.0784], [0.1171, 0.0970, 0.1109, 0.1297, 0.0918, 0.0655, 0.1007, 0.1025, 0.1271, 0.0576], [0.1118, 0.0318, 0.0414, 0.0949, 0.1068, 0.0935, 0.2687, 0.1014, 0.0943, 0.0553]], grad_fn=&lt;SliceBackward&gt;) . pred_labels = torch.argmax(preds, dim=-1) pred_labels[:5] . tensor([6, 8, 8, 3, 6]) . y[:5] . tensor([6, 9, 1, 8, 8]) . from pl_bolts.datamodules import CIFAR10DataModule dm = CIFAR10DataModule(&#39;.&#39;) . Supervised Pretraining . Fitting only the new finetuning layer . # from torch.nn.functional import cross_entropy # from torch.optim import Adam # optimizer = Adam(resnet50.fc.parameters(), lr=1e-3) # epochs = 10 # for epoch in range(epochs): # for batch in dm.train_dataloader(): # x, y = batch # # features = backbone(x) # # # disable gradients to backbone if all parameters used by the optimizer # # features = features.detach() # # # tell PyTorch not to track the computational graph: much faster, less memory used: not backpropagated # # with torch.no_grad(): # # features = backbone(x) # # preds = finetune_layer(features) # preds = resnet50(x) # loss = cross_entropy(preds, y) # loss.backward() # optimizer.step() # optimizer.zero_grad() . import pytorch_lightning as pl from pytorch_lightning.metrics.functional import accuracy from torch.nn.functional import cross_entropy from torch.optim import Adam class ImageClassifier(pl.LightningModule): def __init__(self, num_classes=10, lr=1e-3): super().__init__() self.save_hyperparameters() # self.num_classes = num_classes # self.lr = lr self.model = models.resnet50(pretrained=True) for param in self.model.parameters(): param.requires_grad = False self.model.fc = torch.nn.Linear(self.model.fc.in_features, num_classes) def training_step(self, batch, batch_idx): # return the loss given a batch: this has a computational graph attached to it: optimization x, y = batch preds = self.model(x) loss = cross_entropy(preds, y) self.log(&#39;train_loss&#39;, loss) # lightning detaches your loss graph and uses its value self.log(&#39;train_acc&#39;, accuracy(preds, y)) return loss def configure_optimizers(self): # return optimizer optimizer = Adam(self.model.fc.parameters(), lr=self.hparams.lr) return optimizer . classifier = ImageClassifier() trainer = pl.Trainer(progress_bar_refresh_rate=20, gpus=1, max_epochs=2) # for Colab: set refresh rate to 20 instead of 10 to avoid freezing trainer.fit(classifier, dm) # train_loader . GPU available: True, used: True TPU available: False, using: 0 TPU cores LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0] /usr/local/lib/python3.6/dist-packages/pytorch_lightning/utilities/distributed.py:45: UserWarning: you passed in a val_dataloader but have no validation_step. Skipping validation loop warnings.warn(*args, **kwargs) . Files already downloaded and verified Files already downloaded and verified . | Name | Type | Params 0 | model | ResNet | 23 M . . 1 . %reload_ext tensorboard %tensorboard --logdir lightning_logs/ . . . Fitting all the model after 10 epochs . import pytorch_lightning as pl from pytorch_lightning.metrics.functional import accuracy from torch.nn.functional import cross_entropy from torch.optim import Adam class ImageClassifier(pl.LightningModule): def __init__(self, num_classes=10, lr=1e-3): super().__init__() self.save_hyperparameters() # self.num_classes = num_classes # self.lr = lr self.model = models.resnet50(pretrained=True) for param in self.model.parameters(): param.requires_grad = False self.model.fc = torch.nn.Linear(self.model.fc.in_features, num_classes) def training_step(self, batch, batch_idx): # return the loss given a batch: this has a computational graph attached to it: optimization x, y = batch if self.trainer.current_epoch == 10: for param in self.model.parameters(): param.requires_grad = True preds = self.model(x) loss = cross_entropy(preds, y) self.log(&#39;train_loss&#39;, loss) # lightning detaches your loss graph and uses its value self.log(&#39;train_acc&#39;, accuracy(preds, y)) return loss def configure_optimizers(self): # return optimizer optimizer = Adam(self.model.parameters(), lr=self.hparams.lr) # self.model.fc.parameters() return optimizer . classifier = ImageClassifier() trainer = pl.Trainer(progress_bar_refresh_rate=5, gpus=1, limit_train_batches=20, max_epochs=20) trainer.fit(classifier, dm) # train_loader . GPU available: True, used: True TPU available: False, using: 0 TPU cores LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0] /usr/local/lib/python3.6/dist-packages/pytorch_lightning/utilities/distributed.py:45: UserWarning: you passed in a val_dataloader but have no validation_step. Skipping validation loop warnings.warn(*args, **kwargs) | Name | Type | Params 0 | model | ResNet | 23 M . . 1 . %reload_ext tensorboard %tensorboard --logdir lightning_logs/ . Reusing TensorBoard on port 6006 (pid 327), started 0:01:19 ago. (Use &#39;!kill 327&#39; to kill it.) . . . Self-Supervised Pretraining . https://pytorch-lightning-bolts.readthedocs.io/en/latest/self_supervised_models.html#swav . Fitting all the model after 10 epochs . import pytorch_lightning as pl from pytorch_lightning.metrics.functional import accuracy from torch.nn.functional import cross_entropy from torch.optim import Adam from pl_bolts.models.self_supervised import SwAV weight_path = &#39;https://pl-bolts-weights.s3.us-east-2.amazonaws.com/swav/swav_imagenet/swav_imagenet.pth.tar&#39; swav = SwAV.load_from_checkpoint(weight_path, strict=True) # from pl_bolts.models.self_supervised import SimCLR # weight_path = &#39;https://pl-bolts-weights.s3.us-east-2.amazonaws.com/simclr/simclr-cifar10-v1-exp12_87_52/epoch%3D960.ckpt&#39; # simclr = SimCLR.load_from_checkpoint(weight_path, strict=False) class ImageClassifier(pl.LightningModule): def __init__(self, num_classes=10, lr=1e-3): super().__init__() self.save_hyperparameters() # self.num_classes = num_classes # self.lr = lr # self.model = models.resnet50(pretrained=True) self.backbone = swav.model # self.backbone = simclr for param in self.backbone.parameters(): param.requires_grad = False # self.model.fc = torch.nn.Linear(self.model.fc.in_features, num_classes) self.finetune_layer = torch.nn.Linear(3000, num_classes) def training_step(self, batch, batch_idx): # return the loss given a batch: this has a computational graph attached to it: optimization x, y = batch if self.trainer.current_epoch == 10: for param in self.backbone.parameters(): param.requires_grad = True (features1, features2) = self.backbone(x) features = features2 # features = self.backbone(x) preds = self.finetune_layer(features) loss = cross_entropy(preds, y) self.log(&#39;train_loss&#39;, loss) # lightning detaches your loss graph and uses its value self.log(&#39;train_acc&#39;, accuracy(preds, y)) return loss def configure_optimizers(self): # return optimizer optimizer = Adam(self.parameters(), lr=self.hparams.lr) # self.model.fc.parameters() return optimizer . Downloading: &#34;https://pl-bolts-weights.s3.us-east-2.amazonaws.com/swav/swav_imagenet/swav_imagenet.pth.tar&#34; to /root/.cache/torch/hub/checkpoints/swav_imagenet.pth.tar . . classifier = ImageClassifier() trainer = pl.Trainer(progress_bar_refresh_rate=5, gpus=1, limit_train_batches=20, max_epochs=20) trainer.fit(classifier, dm) # train_loader . GPU available: True, used: True TPU available: False, using: 0 TPU cores LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0] /usr/local/lib/python3.6/dist-packages/pytorch_lightning/utilities/distributed.py:45: UserWarning: you passed in a val_dataloader but have no validation_step. Skipping validation loop warnings.warn(*args, **kwargs) | Name | Type | Params 0 | backbone | ResNet | 28 M 1 | finetune_layer | Linear | 30 K . . 1 . %reload_ext tensorboard %tensorboard --logdir lightning_logs/ . Reusing TensorBoard on port 6006 (pid 327), started 0:03:19 ago. (Use &#39;!kill 327&#39; to kill it.) . . .",
            "url": "/blog/2020/11/17/pytorch-lightning-transfer-learning.html",
            "relUrl": "/blog/2020/11/17/pytorch-lightning-transfer-learning.html",
            "date": " • 2020-11-17"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "/blog/2020/02/20/test.html",
            "relUrl": "/blog/2020/02/20/test.html",
            "date": " • 2020-02-20"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "/blog/2020/01/14/test-markdown-post.html",
            "relUrl": "/blog/2020/01/14/test-markdown-post.html",
            "date": " • 2020-01-14"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Data Scientist with a triple-skill profile (scientific, programming and managerial) who masters Data Science methods and technologies in Agile mode to extract value from Big Data and allow data-driven business decisions. .",
          "url": "/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Blog",
          "content": "",
          "url": "/blog/",
          "relUrl": "/blog/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "CV",
          "content": "CV content from _data/resume.yml .",
          "url": "/cv/",
          "relUrl": "/cv/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}